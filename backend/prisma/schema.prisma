generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employee {
  id                   Int            @id @default(autoincrement())
  employeeCode         String         @unique
  fullName             String         @db.VarChar(255)
  emailAddress         String
  passwordHash         String?        @db.Text
  dateOfJoining        DateTime
  probationEndDate     DateTime?
  isOnNoticePeriod     Boolean        @default(false)
  employmentType       EmploymentType
  isActive             Boolean        @default(true)
  roleId               Int
  role                 Role           @relation(fields: [roleId], references: [id])
  countryId            Int
  country              Country        @relation(fields: [countryId], references: [id])
  departmentId         Int?
  department           Department?    @relation(fields: [departmentId], references: [id])
  managerId            Int?
  manager              Employee?      @relation("ManagerSubordinates", fields: [managerId], references: [id]) // Changed from ManagerEmployees
  subordinates         Employee[]     @relation("ManagerSubordinates")
  Gender               Gender
  BUHeadId             Int?
  BUnitHead            Employee?      @relation("BUheadRelation", fields: [BUHeadId], references: [id])
  underBUheadEmployees Employee[]     @relation("BUheadRelation")
  has_children         Boolean
  isMarried            Boolean
  leaveBalance         LeaveBalance[]
  leaveRequests        LeaveRequest[] @relation("RequestedLeaves")
  approvedRequests     LeaveRequest[] @relation("LeaveApprovals")
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt

  @@index([roleId])
  @@index([countryId])
  @@index([departmentId])
  @@index([managerId])
  @@index([isActive])
}

enum Gender {
  Male
  Female
  Other
}

model LeaveBalance {
  id               Int         @id @default(autoincrement())
  year             Int
  entitledDays     Float
  usedDays         Float       @default(0)
  remainingDays    Float
  carryForwardDays Float       @default(0)
  employeeId       Int
  employee         Employee    @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  leavePolicyId    Int
  leavePolicy      LeavePolicy @relation(fields: [leavePolicyId], references: [id], onDelete: Cascade)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  @@unique([employeeId, leavePolicyId, year])
  @@index([employeeId])
  @@index([leavePolicyId])
}

model LeaveRequest {
  id                    Int                @id @default(autoincrement())
  startDate             DateTime
  endDate               DateTime
  requestedNumberOfDays Float
  leavePeriod           LeavePeriod
  status                LeaveRequestStatus @default(Pending)
  reason                String?            @db.Text
  supportingDoc         String?
  employeeId            Int
  employee              Employee           @relation("RequestedLeaves", fields: [employeeId], references: [id], onDelete: Cascade)
  leavePolicyId         Int
  leavePolicy           LeavePolicy        @relation(fields: [leavePolicyId], references: [id])
  approvedById          Int?
  approvedBy            Employee?          @relation("LeaveApprovals", fields: [approvedById], references: [id])
  approvalDate          DateTime?
  rejectionReason       String?            @db.Text
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt

  @@index([employeeId])
  @@index([leavePolicyId])
  @@index([approvedById])
  @@index([status])
  @@index([startDate, endDate])
}

model LeaveType {
  id            Int     @id @default(autoincrement())
  name          String  @unique
  description   String? @db.VarChar(250)
  requiresProof Boolean @default(false)
  isActive      Boolean @default(true)

  // Relations
  countryPolicies LeavePolicy[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isActive])
}

model LeavePolicy {
  id              Int            @id @default(autoincrement())
  allowedDays     Int
  maxCarryForward Int            @default(0)
  isEnabled       Boolean        @default(true)
  countryId       Int
  country         Country        @relation(fields: [countryId], references: [id], onDelete: Cascade)
  leaveTypeId     Int
  leaveType       LeaveType      @relation(fields: [leaveTypeId], references: [id], onDelete: Cascade)
  leaveBalances   LeaveBalance[]
  leaveRequests   LeaveRequest[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@unique([countryId, leaveTypeId])
  @@index([countryId])
  @@index([leaveTypeId])
}

model Country {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  code          String        @unique @db.VarChar(3)
  employees     Employee[]
  holidays      Holiday[]
  leavePolicies LeavePolicy[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Holiday {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(200)
  date       DateTime
  isOptional Boolean  @default(false)
  countryId  Int
  country    Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([countryId])
  @@index([date])
}

model Department {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  employees Employee[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Role {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  employees Employee[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Admin {
  id             Int    @id @default(autoincrement())
  emailAddress   String @unique
  hashedPassword String
}

enum EmploymentType {
  FullTime
  Contract
  Intern
}

enum LeavePeriod {
  FullDay
  HalfDay
  Mixed
}

enum LeaveRequestStatus {
  Pending
  Approved
  Rejected
  Cancelled
}
